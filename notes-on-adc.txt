
//
// I don't know which header files or which C source files I need in order to
// make the following code works yet.
//
// The only difference between adc1() and adc2() is that one of them uses
// ADC_CONFIG_PSEL_AnalogInput4 when setting NRF_ADC->CONFIG while the other
// one of them uses ADC_CONFIG_PSEL_AnalogInput3.  You may want to change them
// to meet your needs, when your analog input is at another PIN.
//

int adc1(void)
{
    int adc_result;
    // interrupt ADC
    NRF_ADC->INTENSET = (ADC_INTENSET_END_Disabled << ADC_INTENSET_END_Pos);
    // config ADC
    NRF_ADC->CONFIG = (ADC_CONFIG_EXTREFSEL_None << ADC_CONFIG_EXTREFSEL_Pos)
                    | (ADC_CONFIG_PSEL_AnalogInput4 << ADC_CONFIG_PSEL_Pos)
                    | (ADC_CONFIG_REFSEL_VBG << ADC_CONFIG_REFSEL_Pos)
                    | (ADC_CONFIG_INPSEL_AnalogInputOneThirdPrescaling << ADC_CONFIG_INPSEL_Pos)
                    | (ADC_CONFIG_RES_8bit << ADC_CONFIG_RES_Pos);
    // enable ADC
    NRF_ADC->ENABLE = ADC_ENABLE_ENABLE_Enabled;
    // start ADC conversion
    NRF_ADC->TASKS_START = 1;
    // wait for conversion to end
    while (!NRF_ADC->EVENTS_END) {}
    NRF_ADC->EVENTS_END = 0;
    // save your ADC result
    adc_result = NRF_ADC->RESULT;
    // use the stop task to save current. workaround for PAN_028 rev1.1 anomaly 1.
    NRF_ADC->TASKS_STOP = 1;
    return adc_result;
}

int adc2(void)
{
    int adc_result;
    // interrupt ADC
    NRF_ADC->INTENSET = (ADC_INTENSET_END_Disabled << ADC_INTENSET_END_Pos);
    // config ADC
    NRF_ADC->CONFIG = (ADC_CONFIG_EXTREFSEL_None << ADC_CONFIG_EXTREFSEL_Pos)
                    | (ADC_CONFIG_PSEL_AnalogInput3 << ADC_CONFIG_PSEL_Pos)
                    | (ADC_CONFIG_REFSEL_VBG << ADC_CONFIG_REFSEL_Pos)
                    | (ADC_CONFIG_INPSEL_AnalogInputOneThirdPrescaling << ADC_CONFIG_INPSEL_Pos)
                    | (ADC_CONFIG_RES_8bit << ADC_CONFIG_RES_Pos);
    // enable ADC
    NRF_ADC->ENABLE = ADC_ENABLE_ENABLE_Enabled;
    // start ADC conversion
    NRF_ADC->TASKS_START = 1;
    // wait for conversion to end
    while (!NRF_ADC->EVENTS_END) {}
    NRF_ADC->EVENTS_END = 0;
    // save your ADC result
    adc_result = NRF_ADC->RESULT;
    // use the stop task to save current. workaround for PAN_028 rev1.1 anomaly 1.
    NRF_ADC->TASKS_STOP = 1;
    return adc_result;
}

